name: CI Pipeline

# Запуск при push и pull request в main ветку
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Линтинг и проверка кода
  lint:
    name: Линтинг кода
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Настройка Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'
      
      - name: Установка зависимостей
        run: |
          python -m pip install --upgrade pip
          pip install black isort flake8 mypy
      
      - name: Проверка форматирования (Black)
        run: black --check .
      
      - name: Проверка импортов (isort)
        run: isort --check-only .
      
      - name: Линтинг (Flake8)
        run: flake8 .
      
      - name: Type checking (MyPy)
        run: mypy src/

  # Тестирование
  test:
    name: Тестирование
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    services:
      postgres:
        image: postgres:16-alpine
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Настройка Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}
      
      - name: Кэширование зависимостей
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-
      
      - name: Установка зависимостей
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov
      
      - name: Запуск тестов
        env:
          POSTGRES_HOST: localhost
          POSTGRES_PORT: 5432
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_db
          REDIS_HOST: localhost
          REDIS_PORT: 6379
        run: |
          pytest --cov=src --cov-report=xml --cov-report=term
      
      - name: Загрузка coverage в Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          fail_ci_if_error: true

  # Сборка Docker образа
  docker:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [lint, test]
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
      - uses: actions/checkout@v3
      
      - name: Настройка Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: Логин в Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      
      - name: Извлечение метаданных
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: rivega42/hybrid-rag
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=semver,pattern={{version}}
            type=semver,pattern={{major}}.{{minor}}
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Сборка и публикация
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=registry,ref=rivega42/hybrid-rag:buildcache
          cache-to: type=registry,ref=rivega42/hybrid-rag:buildcache,mode=max

  # Проверка безопасности
  security:
    name: Проверка безопасности
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      
      - name: Запуск Trivy сканера
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Загрузка результатов в GitHub Security
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'