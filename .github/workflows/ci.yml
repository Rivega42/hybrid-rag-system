name: CI Pipeline

# Запуск при push и pull request в main ветку
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  # Линтинг и проверка кода
  lint:
    name: Линтинг кода
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Установка Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
    
    - name: Установка зависимостей
      run: |
        python -m pip install --upgrade pip
        pip install black isort flake8 mypy
    
    - name: Проверка форматирования (Black)
      run: black --check src tests
    
    - name: Проверка импортов (isort)
      run: isort --check-only src tests
    
    - name: Линтинг (flake8)
      run: flake8 src tests
    
    - name: Проверка типов (mypy)
      run: mypy src

  # Тестирование
  test:
    name: Тестирование
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: ['3.9', '3.10', '3.11']
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test
          POSTGRES_PASSWORD: test
          POSTGRES_DB: test_hybrid_rag
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Установка Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Кэширование зависимостей
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-
    
    - name: Установка зависимостей
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov pytest-asyncio
    
    - name: Запуск тестов с покрытием
      env:
        POSTGRES_HOST: localhost
        POSTGRES_PORT: 5432
        POSTGRES_USER: test
        POSTGRES_PASSWORD: test
        POSTGRES_DB: test_hybrid_rag
        REDIS_HOST: localhost
        REDIS_PORT: 6379
      run: |
        pytest --cov=hybrid_rag --cov-report=xml --cov-report=html
    
    - name: Загрузка покрытия в Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        fail_ci_if_error: true

  # Сборка Docker образа
  docker:
    name: Сборка Docker образа
    runs-on: ubuntu-latest
    needs: [lint, test]
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Настройка Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Сборка образа
      uses: docker/build-push-action@v4
      with:
        context: .
        push: false
        tags: hybrid-rag:latest
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Проверка безопасности
  security:
    name: Проверка безопасности
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Запуск Trivy сканера
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'
    
    - name: Загрузка результатов в GitHub Security
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: 'trivy-results.sarif'