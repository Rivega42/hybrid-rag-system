#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
test_routing.py - Unit —Ç–µ—Å—Ç—ã –¥–ª—è —Å–∏—Å—Ç–µ–º—ã –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤

–¢–µ—Å—Ç–∏—Ä—É–µ—Ç:
- –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—é –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
- –í—ã–±–æ—Ä –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏
- Fallback –º–µ—Ö–∞–Ω–∏–∑–º—ã
- –û–±—Ä–∞–±–æ—Ç–∫—É edge cases
"""

import pytest
import asyncio
from unittest.mock import Mock, patch, AsyncMock
from hybrid_rag.routing import QueryRouter, QueryComplexity, RoutingStrategy
from hybrid_rag.exceptions import RoutingError


class TestQueryRouter:
    """–¢–µ—Å—Ç—ã –¥–ª—è QueryRouter"""
    
    @pytest.fixture
    def router(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–∫–∑–µ–º–ø–ª—è—Ä–∞ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è —Ç–µ—Å—Ç–æ–≤"""
        return QueryRouter(
            classifier_model='mock',
            threshold_simple=0.3,
            threshold_complex=0.7
        )
    
    @pytest.mark.asyncio
    async def test_simple_query_classification(self, router):
        """–¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø—Ä–æ—Å—Ç–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        # –ü—Ä–æ—Å—Ç—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        simple_queries = [
            "–ß—Ç–æ —Ç–∞–∫–æ–µ Python?",
            "–ö–∞–∫–∞—è —Å—Ç–æ–ª–∏—Ü–∞ –†–æ—Å—Å–∏–∏?",
            "–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è"
        ]
        
        for query in simple_queries:
            complexity = await router.classify_query(query)
            assert complexity == QueryComplexity.SIMPLE, f"Query '{query}' should be SIMPLE"
    
    @pytest.mark.asyncio
    async def test_complex_query_classification(self, router):
        """–¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ —Å–ª–æ–∂–Ω–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞"""
        complex_queries = [
            "–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –≤–ª–∏—è–Ω–∏–µ AI –Ω–∞ —ç–∫–æ–Ω–æ–º–∏–∫—É –∏ –ø—Ä–µ–¥–ª–æ–∂–∏ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é –∞–¥–∞–ø—Ç–∞—Ü–∏–∏",
            "–°—Ä–∞–≤–Ω–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –≤–µ—Ä—Å–∏–π Python –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10 –ª–µ—Ç",
            "–ò—Å—Å–ª–µ–¥—É–π –∫–æ—Ä—Ä–µ–ª—è—Ü–∏—é –º–µ–∂–¥—É –∫–ª–∏–º–∞—Ç–æ–º –∏ —ç–∫–æ–Ω–æ–º–∏—á–µ—Å–∫–∏–º —Ä–æ—Å—Ç–æ–º"
        ]
        
        for query in complex_queries:
            with patch.object(router.classifier, 'predict', return_value=0.9):
                complexity = await router.classify_query(query)
                assert complexity == QueryComplexity.COMPLEX, f"Query '{query}' should be COMPLEX"
    
    @pytest.mark.asyncio
    async def test_medium_query_classification(self, router):
        """–¢–µ—Å—Ç –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ –∑–∞–ø—Ä–æ—Å–∞ —Å—Ä–µ–¥–Ω–µ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏"""
        medium_queries = [
            "–°—Ä–∞–≤–Ω–∏ Python –∏ JavaScript",
            "–ù–∞–π–¥–∏ –ø—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –æ–±–ª–∞—á–Ω—ã—Ö —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–π",
            "–û–±—ä—è—Å–Ω–∏ —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É ML –∏ DL"
        ]
        
        for query in medium_queries:
            with patch.object(router.classifier, 'predict', return_value=0.5):
                complexity = await router.classify_query(query)
                assert complexity == QueryComplexity.MEDIUM, f"Query '{query}' should be MEDIUM"
    
    @pytest.mark.asyncio
    async def test_routing_strategy_selection(self, router):
        """–¢–µ—Å—Ç –≤—ã–±–æ—Ä–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏"""
        # –ú–∞–ø–ø–∏–Ω–≥ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –Ω–∞ —Å—Ç—Ä–∞—Ç–µ–≥–∏—é
        test_cases = [
            (QueryComplexity.SIMPLE, RoutingStrategy.CLASSIC_RAG),
            (QueryComplexity.MEDIUM, RoutingStrategy.ENHANCED_RAG),
            (QueryComplexity.COMPLEX, RoutingStrategy.AGENTIC_RAG)
        ]
        
        for complexity, expected_strategy in test_cases:
            strategy = router.select_strategy(complexity)
            assert strategy == expected_strategy
    
    @pytest.mark.asyncio
    async def test_fallback_mechanism(self, router):
        """–¢–µ—Å—Ç fallback –º–µ—Ö–∞–Ω–∏–∑–º–∞ –ø—Ä–∏ —Å–±–æ–µ –æ—Å–Ω–æ–≤–Ω–æ–π —Å—Ç—Ä–∞—Ç–µ–≥–∏–∏"""
        query = "Test query"
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–±–æ–π Agentic RAG
        with patch.object(router, 'execute_agentic_rag', side_effect=Exception("Agentic failed")):
            with patch.object(router, 'execute_enhanced_rag', return_value="Enhanced result"):
                result = await router.route_query(query, enable_fallback=True)
                assert result == "Enhanced result"
    
    @pytest.mark.asyncio
    async def test_cascading_fallback(self, router):
        """–¢–µ—Å—Ç –∫–∞—Å–∫–∞–¥–Ω–æ–≥–æ fallback –ø—Ä–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö —Å–±–æ—è—Ö"""
        query = "Test query"
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Å–±–æ–π Agentic –∏ Enhanced RAG
        with patch.object(router, 'execute_agentic_rag', side_effect=Exception()):
            with patch.object(router, 'execute_enhanced_rag', side_effect=Exception()):
                with patch.object(router, 'execute_classic_rag', return_value="Classic result"):
                    result = await router.route_query(query, enable_fallback=True)
                    assert result == "Classic result"
    
    @pytest.mark.asyncio
    async def test_no_fallback_raises_error(self, router):
        """–¢–µ—Å—Ç —á—Ç–æ –±–µ–∑ fallback –≤–æ–∑–Ω–∏–∫–∞–µ—Ç –æ—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ–µ"""
        query = "Test query"
        
        with patch.object(router, 'classify_query', return_value=QueryComplexity.COMPLEX):
            with patch.object(router, 'execute_agentic_rag', side_effect=RoutingError("Failed")):
                with pytest.raises(RoutingError):
                    await router.route_query(query, enable_fallback=False)
    
    @pytest.mark.asyncio
    async def test_query_timeout(self, router):
        """–¢–µ—Å—Ç —Ç–∞–π–º–∞—É—Ç–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞"""
        query = "Slow query"
        
        async def slow_execution():
            await asyncio.sleep(10)  # –î–æ–ª–≥–∞—è –æ–ø–µ—Ä–∞—Ü–∏—è
            return "Result"
        
        with patch.object(router, 'execute_agentic_rag', side_effect=slow_execution):
            with pytest.raises(asyncio.TimeoutError):
                await asyncio.wait_for(
                    router.route_query(query),
                    timeout=0.1
                )
    
    def test_confidence_threshold_adjustment(self, router):
        """–¢–µ—Å—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ—Ä–æ–≥–æ–≤ —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç–∏"""
        # –ù–∞—á–∞–ª—å–Ω—ã–µ –ø–æ—Ä–æ–≥–∏
        assert router.threshold_simple == 0.3
        assert router.threshold_complex == 0.7
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ—Ä–æ–≥–æ–≤
        router.update_thresholds(simple=0.2, complex=0.8)
        assert router.threshold_simple == 0.2
        assert router.threshold_complex == 0.8
    
    @pytest.mark.asyncio
    async def test_parallel_routing(self, router):
        """–¢–µ—Å—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        queries = [f"Query {i}" for i in range(10)]
        
        with patch.object(router, 'route_query', return_value="Result"):
            results = await router.batch_route(queries)
            assert len(results) == 10
            assert all(r == "Result" for r in results)
    
    @pytest.mark.asyncio
    async def test_cycle_detection(self, router):
        """–¢–µ—Å—Ç –æ–±–Ω–∞—Ä—É–∂–µ–Ω–∏—è —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"""
        query = "Recursive query"
        
        # –°–∏–º—É–ª–∏—Ä—É–µ–º —Ü–∏–∫–ª–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å
        with patch.object(router, 'detect_cycle', return_value=True):
            with pytest.raises(RoutingError, match="Cycle detected"):
                await router.route_query(query)
    
    @pytest.mark.parametrize("query,expected_complexity", [
        ("", QueryComplexity.SIMPLE),  # –ü—É—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å
        ("a" * 10000, QueryComplexity.COMPLEX),  # –û—á–µ–Ω—å –¥–ª–∏–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        ("SELECT * FROM users", QueryComplexity.MEDIUM),  # SQL –∑–∞–ø—Ä–æ—Å
        ("ü§î‚ùì", QueryComplexity.SIMPLE),  # –≠–º–æ–¥–∑–∏
    ])
    @pytest.mark.asyncio
    async def test_edge_cases(self, router, query, expected_complexity):
        """–¢–µ—Å—Ç –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥—Ä–∞–Ω–∏—á–Ω—ã—Ö —Å–ª—É—á–∞–µ–≤"""
        with patch.object(router.classifier, 'predict') as mock_predict:
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º mock –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
            if expected_complexity == QueryComplexity.SIMPLE:
                mock_predict.return_value = 0.2
            elif expected_complexity == QueryComplexity.MEDIUM:
                mock_predict.return_value = 0.5
            else:
                mock_predict.return_value = 0.9
            
            complexity = await router.classify_query(query)
            assert complexity == expected_complexity


class TestRoutingMetrics:
    """–¢–µ—Å—Ç—ã –¥–ª—è –º–µ—Ç—Ä–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏"""
    
    @pytest.fixture
    def metrics_router(self):
        """–†–æ—É—Ç–µ—Ä —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
        return QueryRouter(
            enable_metrics=True,
            metrics_backend='prometheus'
        )
    
    @pytest.mark.asyncio
    async def test_metrics_collection(self, metrics_router):
        """–¢–µ—Å—Ç —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫ –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–∏"""
        query = "Test query for metrics"
        
        with patch.object(metrics_router, 'execute_classic_rag', return_value="Result"):
            await metrics_router.route_query(query)
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–±—Ä–∞–Ω—ã
            metrics = metrics_router.get_metrics()
            assert 'total_queries' in metrics
            assert 'strategy_distribution' in metrics
            assert 'average_latency' in metrics
    
    @pytest.mark.asyncio
    async def test_strategy_distribution(self, metrics_router):
        """–¢–µ—Å—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Å—Ç—Ä–∞—Ç–µ–≥–∏–π"""
        # –í—ã–ø–æ–ª–Ω—è–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤
        queries = [
            ("Simple query", QueryComplexity.SIMPLE),
            ("Complex query", QueryComplexity.COMPLEX),
            ("Another simple", QueryComplexity.SIMPLE)
        ]
        
        for query, complexity in queries:
            with patch.object(metrics_router, 'classify_query', return_value=complexity):
                with patch.object(metrics_router, 'execute_strategy', return_value="Result"):
                    await metrics_router.route_query(query)
        
        distribution = metrics_router.get_strategy_distribution()
        assert distribution[RoutingStrategy.CLASSIC_RAG] == 2
        assert distribution[RoutingStrategy.AGENTIC_RAG] == 1
