version: '3.8'

# Сервисы Hybrid RAG системы
services:
  # API сервер
  api:
    build: .
    container_name: hybrid-rag-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
      - QDRANT_HOST=qdrant
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
      - qdrant
    networks:
      - hybrid-rag-network
    restart: unless-stopped

  # PostgreSQL для метаданных
  postgres:
    image: postgres:15-alpine
    container_name: hybrid-rag-postgres
    environment:
      POSTGRES_DB: hybrid_rag
      POSTGRES_USER: hybrid_rag
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-password}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - hybrid-rag-network
    restart: unless-stopped

  # Redis для кэширования
  redis:
    image: redis:7-alpine
    container_name: hybrid-rag-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - hybrid-rag-network
    restart: unless-stopped

  # Qdrant для векторного поиска
  qdrant:
    image: qdrant/qdrant:latest
    container_name: hybrid-rag-qdrant
    volumes:
      - qdrant_data:/qdrant/storage
    ports:
      - "6333:6333"
    networks:
      - hybrid-rag-network
    restart: unless-stopped

  # Prometheus для мониторинга
  prometheus:
    image: prom/prometheus:latest
    container_name: hybrid-rag-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - hybrid-rag-network
    restart: unless-stopped

  # Grafana для визуализации
  grafana:
    image: grafana/grafana:latest
    container_name: hybrid-rag-grafana
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana:/etc/grafana/provisioning
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - hybrid-rag-network
    restart: unless-stopped

networks:
  hybrid-rag-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  prometheus_data:
  grafana_data: