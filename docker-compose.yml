# Docker Compose конфигурация для Hybrid RAG System
version: '3.8'

services:
  # API сервер
  api:
    build:
      context: .
      dockerfile: docker/Dockerfile
    container_name: hybrid-rag-api
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - QDRANT_HOST=qdrant
      - POSTGRES_HOST=postgres
      - REDIS_HOST=redis
    volumes:
      - ./src:/app/src
      - ./data:/app/data
    depends_on:
      - postgres
      - redis
      - qdrant
    networks:
      - hybrid-rag-network
    restart: unless-stopped

  # PostgreSQL база данных для метаданных
  postgres:
    image: postgres:15-alpine
    container_name: hybrid-rag-postgres
    environment:
      - POSTGRES_USER=hybrid_rag
      - POSTGRES_PASSWORD=hybrid_rag_password
      - POSTGRES_DB=hybrid_rag
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - hybrid-rag-network
    restart: unless-stopped

  # Redis для кэширования
  redis:
    image: redis:7-alpine
    container_name: hybrid-rag-redis
    command: redis-server --appendonly yes
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - hybrid-rag-network
    restart: unless-stopped

  # Qdrant векторная база данных
  qdrant:
    image: qdrant/qdrant:latest
    container_name: hybrid-rag-qdrant
    ports:
      - "6333:6333"
    volumes:
      - qdrant_data:/qdrant/storage
    networks:
      - hybrid-rag-network
    restart: unless-stopped

  # Prometheus для мониторинга
  prometheus:
    image: prom/prometheus:latest
    container_name: hybrid-rag-prometheus
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    ports:
      - "9090:9090"
    networks:
      - hybrid-rag-network
    restart: unless-stopped

  # Grafana для визуализации
  grafana:
    image: grafana/grafana:latest
    container_name: hybrid-rag-grafana
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana-dashboards:/etc/grafana/provisioning/dashboards
    environment:
      - GF_SECURITY_ADMIN_USER=admin
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_INSTALL_PLUGINS=
    ports:
      - "3000:3000"
    networks:
      - hybrid-rag-network
    restart: unless-stopped

  # MinIO для S3-совместимого хранилища
  minio:
    image: minio/minio:latest
    container_name: hybrid-rag-minio
    command: server /data --console-address ":9001"
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - hybrid-rag-network
    restart: unless-stopped

networks:
  hybrid-rag-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  qdrant_data:
  prometheus_data:
  grafana_data:
  minio_data: