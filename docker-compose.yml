version: '3.8'

services:
  # Основной API сервер
  hybrid-rag-api:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: hybrid-rag-api
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      - ENVIRONMENT=production
      - LOG_LEVEL=INFO
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - POSTGRES_HOST=postgres
      - POSTGRES_PORT=5432
      - POSTGRES_DB=hybrid_rag
      - POSTGRES_USER=hybrid_rag
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}
      - REDIS_HOST=redis
      - REDIS_PORT=6379
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
    depends_on:
      - postgres
      - redis
      - qdrant
    networks:
      - hybrid-rag-network

  # PostgreSQL база данных для метаданных
  postgres:
    image: postgres:15-alpine
    container_name: hybrid-rag-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=hybrid_rag
      - POSTGRES_USER=hybrid_rag
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD:-changeme}
      - PGDATA=/var/lib/postgresql/data/pgdata
    volumes:
      - postgres-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - hybrid-rag-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U hybrid_rag"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis для кэширования
  redis:
    image: redis:7-alpine
    container_name: hybrid-rag-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - "6379:6379"
    networks:
      - hybrid-rag-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Qdrant векторная база данных
  qdrant:
    image: qdrant/qdrant:latest
    container_name: hybrid-rag-qdrant
    restart: unless-stopped
    volumes:
      - qdrant-data:/qdrant/storage
    ports:
      - "6333:6333"
      - "6334:6334"  # gRPC порт
    networks:
      - hybrid-rag-network
    environment:
      - QDRANT__LOG_LEVEL=INFO

  # Prometheus для мониторинга
  prometheus:
    image: prom/prometheus:latest
    container_name: hybrid-rag-prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus
    ports:
      - "9090:9090"
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
    networks:
      - hybrid-rag-network

  # Grafana для визуализации метрик
  grafana:
    image: grafana/grafana:latest
    container_name: hybrid-rag-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_INSTALL_PLUGINS=redis-datasource
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    depends_on:
      - prometheus
    networks:
      - hybrid-rag-network

networks:
  hybrid-rag-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  qdrant-data:
  prometheus-data:
  grafana-data: